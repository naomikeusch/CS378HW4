import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Random;


import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ArffLoader;
import weka.classifiers.bayes.NaiveBayes;
import weka.core.converters.CSVLoader;
import weka.classifiers.Evaluation;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;

import java.io.File;

//resources:
/**
 * This example trains NaiveBayes incrementally on data obtained
 * from the ArffLoader.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */
 
 // https://www.youtube.com/watch?v=q3Gf6kqaJWA
 
 //https://www.researchgate.net/post/How_can_we_select_specific_attributes_using_WEKA_API
 
public class classifiers {

  public static void main(String[] args) throws Exception {
	  
		File data = new File("grades.csv");
	    CSVLoader loader = new CSVLoader();
        loader.setSource(data);
        Instances inst = loader.getDataSet();
		Remove remove = new Remove();
		remove.setAttributeIndices("12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, last");
		remove.setInvertSelection(true);
        remove.setInputFormat(inst);
		Instances train = Filter.useFilter(inst, remove);
	  
	//  BufferedReader br = new BufferedReader(new FileReader("grades.csv"));
	  
	 // Instances train = new Instances(br);
	  
	  train.setClassIndex(train.numAttributes() - 1);
	  
//br.close();
	  
	  NaiveBayes nb = new NaiveBayes();
	  nb.buildClassifier(train);
	  
	  Evaluation eval = new Evaluation(train);
	  eval.crossValidateModel(nb, train, 10 , new Random(1));
	  System.out.println(eval.toSummaryString("\nResults\n=====\n", true));
	  System.out.println(eval.fMeasure(1) + " " + eval.precision(1) + " " + eval.recall(1));
	  
  }
}
